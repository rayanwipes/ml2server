# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.job_status_type import JobStatusType  # noqa: F401,E501
from swagger_server import util


class StatusData(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, percent_trained: float=None, status: JobStatusType=None, description: str=None, id: str=None, start_time: str=None, started_by: str=None):  # noqa: E501
        """StatusData - a model defined in Swagger

        :param percent_trained: The percent_trained of this StatusData.  # noqa: E501
        :type percent_trained: float
        :param status: The status of this StatusData.  # noqa: E501
        :type status: JobStatusType
        :param description: The description of this StatusData.  # noqa: E501
        :type description: str
        :param id: The id of this StatusData.  # noqa: E501
        :type id: str
        :param start_time: The start_time of this StatusData.  # noqa: E501
        :type start_time: str
        :param started_by: The started_by of this StatusData.  # noqa: E501
        :type started_by: str
        """
        self.swagger_types = {
            'percent_trained': float,
            'status': JobStatusType,
            'description': str,
            'id': str,
            'start_time': str,
            'started_by': str
        }

        self.attribute_map = {
            'percent_trained': 'percent_trained',
            'status': 'status',
            'description': 'description',
            'id': 'id',
            'start_time': 'start_time',
            'started_by': 'started_by'
        }

        self._percent_trained = percent_trained
        self._status = status
        self._description = description
        self._id = id
        self._start_time = start_time
        self._started_by = started_by

    @classmethod
    def from_dict(cls, dikt) -> 'StatusData':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The StatusData of this StatusData.  # noqa: E501
        :rtype: StatusData
        """
        return util.deserialize_model(dikt, cls)

    @property
    def percent_trained(self) -> float:
        """Gets the percent_trained of this StatusData.


        :return: The percent_trained of this StatusData.
        :rtype: float
        """
        return self._percent_trained

    @percent_trained.setter
    def percent_trained(self, percent_trained: float):
        """Sets the percent_trained of this StatusData.


        :param percent_trained: The percent_trained of this StatusData.
        :type percent_trained: float
        """
        if percent_trained is not None and percent_trained > 1:  # noqa: E501
            raise ValueError("Invalid value for `percent_trained`, must be a value less than or equal to `1`")  # noqa: E501
        if percent_trained is not None and percent_trained < 0:  # noqa: E501
            raise ValueError("Invalid value for `percent_trained`, must be a value greater than or equal to `0`")  # noqa: E501

        self._percent_trained = percent_trained

    @property
    def status(self) -> JobStatusType:
        """Gets the status of this StatusData.


        :return: The status of this StatusData.
        :rtype: JobStatusType
        """
        return self._status

    @status.setter
    def status(self, status: JobStatusType):
        """Sets the status of this StatusData.


        :param status: The status of this StatusData.
        :type status: JobStatusType
        """

        self._status = status

    @property
    def description(self) -> str:
        """Gets the description of this StatusData.

        Descriptive log of all that has occurred during the training of the model (accumulates over time).  # noqa: E501

        :return: The description of this StatusData.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this StatusData.

        Descriptive log of all that has occurred during the training of the model (accumulates over time).  # noqa: E501

        :param description: The description of this StatusData.
        :type description: str
        """

        self._description = description

    @property
    def id(self) -> str:
        """Gets the id of this StatusData.

        Model ID  # noqa: E501

        :return: The id of this StatusData.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this StatusData.

        Model ID  # noqa: E501

        :param id: The id of this StatusData.
        :type id: str
        """

        self._id = id

    @property
    def start_time(self) -> str:
        """Gets the start_time of this StatusData.

        Time at which the model began training.  # noqa: E501

        :return: The start_time of this StatusData.
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time: str):
        """Sets the start_time of this StatusData.

        Time at which the model began training.  # noqa: E501

        :param start_time: The start_time of this StatusData.
        :type start_time: str
        """

        self._start_time = start_time

    @property
    def started_by(self) -> str:
        """Gets the started_by of this StatusData.

        Username of the user who started the model training.  # noqa: E501

        :return: The started_by of this StatusData.
        :rtype: str
        """
        return self._started_by

    @started_by.setter
    def started_by(self, started_by: str):
        """Sets the started_by of this StatusData.

        Username of the user who started the model training.  # noqa: E501

        :param started_by: The started_by of this StatusData.
        :type started_by: str
        """

        self._started_by = started_by
