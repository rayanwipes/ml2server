# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.parameter import Parameter  # noqa: F401,E501
from swagger_server import util


class JobInfo(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, job_id: str=None, data_type: str=None, algorithm_name: str=None, partial_training_support: bool=None, job_description: str=None, parameters: List[Parameter]=None):  # noqa: E501
        """JobInfo - a model defined in Swagger

        :param job_id: The job_id of this JobInfo.  # noqa: E501
        :type job_id: str
        :param data_type: The data_type of this JobInfo.  # noqa: E501
        :type data_type: str
        :param algorithm_name: The algorithm_name of this JobInfo.  # noqa: E501
        :type algorithm_name: str
        :param partial_training_support: The partial_training_support of this JobInfo.  # noqa: E501
        :type partial_training_support: bool
        :param job_description: The job_description of this JobInfo.  # noqa: E501
        :type job_description: str
        :param parameters: The parameters of this JobInfo.  # noqa: E501
        :type parameters: List[Parameter]
        """
        self.swagger_types = {
            'job_id': str,
            'data_type': str,
            'algorithm_name': str,
            'partial_training_support': bool,
            'job_description': str,
            'parameters': List[Parameter]
        }

        self.attribute_map = {
            'job_id': 'job_id',
            'data_type': 'data_type',
            'algorithm_name': 'algorithm_name',
            'partial_training_support': 'partial_training_support',
            'job_description': 'job_description',
            'parameters': 'parameters'
        }

        self._job_id = job_id
        self._data_type = data_type
        self._algorithm_name = algorithm_name
        self._partial_training_support = partial_training_support
        self._job_description = job_description
        self._parameters = parameters

    @classmethod
    def from_dict(cls, dikt) -> 'JobInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The JobInfo of this JobInfo.  # noqa: E501
        :rtype: JobInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def job_id(self) -> str:
        """Gets the job_id of this JobInfo.

        Unique ID of the ML job type, used to request the same job type again in a /training call.  # noqa: E501

        :return: The job_id of this JobInfo.
        :rtype: str
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id: str):
        """Sets the job_id of this JobInfo.

        Unique ID of the ML job type, used to request the same job type again in a /training call.  # noqa: E501

        :param job_id: The job_id of this JobInfo.
        :type job_id: str
        """

        self._job_id = job_id

    @property
    def data_type(self) -> str:
        """Gets the data_type of this JobInfo.


        :return: The data_type of this JobInfo.
        :rtype: str
        """
        return self._data_type

    @data_type.setter
    def data_type(self, data_type: str):
        """Sets the data_type of this JobInfo.


        :param data_type: The data_type of this JobInfo.
        :type data_type: str
        """

        self._data_type = data_type

    @property
    def algorithm_name(self) -> str:
        """Gets the algorithm_name of this JobInfo.


        :return: The algorithm_name of this JobInfo.
        :rtype: str
        """
        return self._algorithm_name

    @algorithm_name.setter
    def algorithm_name(self, algorithm_name: str):
        """Sets the algorithm_name of this JobInfo.


        :param algorithm_name: The algorithm_name of this JobInfo.
        :type algorithm_name: str
        """

        self._algorithm_name = algorithm_name

    @property
    def partial_training_support(self) -> bool:
        """Gets the partial_training_support of this JobInfo.


        :return: The partial_training_support of this JobInfo.
        :rtype: bool
        """
        return self._partial_training_support

    @partial_training_support.setter
    def partial_training_support(self, partial_training_support: bool):
        """Sets the partial_training_support of this JobInfo.


        :param partial_training_support: The partial_training_support of this JobInfo.
        :type partial_training_support: bool
        """

        self._partial_training_support = partial_training_support

    @property
    def job_description(self) -> str:
        """Gets the job_description of this JobInfo.

        User friendly description of the job.  # noqa: E501

        :return: The job_description of this JobInfo.
        :rtype: str
        """
        return self._job_description

    @job_description.setter
    def job_description(self, job_description: str):
        """Sets the job_description of this JobInfo.

        User friendly description of the job.  # noqa: E501

        :param job_description: The job_description of this JobInfo.
        :type job_description: str
        """

        self._job_description = job_description

    @property
    def parameters(self) -> List[Parameter]:
        """Gets the parameters of this JobInfo.


        :return: The parameters of this JobInfo.
        :rtype: List[Parameter]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters: List[Parameter]):
        """Sets the parameters of this JobInfo.


        :param parameters: The parameters of this JobInfo.
        :type parameters: List[Parameter]
        """

        self._parameters = parameters
