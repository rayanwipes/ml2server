# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.job_info import JobInfo  # noqa: F401,E501
from swagger_server import util


class SuggestDataJobs(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, job: JobInfo=None, score: float=None):  # noqa: E501
        """SuggestDataJobs - a model defined in Swagger

        :param job: The job of this SuggestDataJobs.  # noqa: E501
        :type job: JobInfo
        :param score: The score of this SuggestDataJobs.  # noqa: E501
        :type score: float
        """
        self.swagger_types = {
            'job': JobInfo,
            'score': float
        }

        self.attribute_map = {
            'job': 'job',
            'score': 'score'
        }

        self._job = job
        self._score = score

    @classmethod
    def from_dict(cls, dikt) -> 'SuggestDataJobs':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SuggestData_jobs of this SuggestDataJobs.  # noqa: E501
        :rtype: SuggestDataJobs
        """
        return util.deserialize_model(dikt, cls)

    @property
    def job(self) -> JobInfo:
        """Gets the job of this SuggestDataJobs.


        :return: The job of this SuggestDataJobs.
        :rtype: JobInfo
        """
        return self._job

    @job.setter
    def job(self, job: JobInfo):
        """Sets the job of this SuggestDataJobs.


        :param job: The job of this SuggestDataJobs.
        :type job: JobInfo
        """

        self._job = job

    @property
    def score(self) -> float:
        """Gets the score of this SuggestDataJobs.


        :return: The score of this SuggestDataJobs.
        :rtype: float
        """
        return self._score

    @score.setter
    def score(self, score: float):
        """Sets the score of this SuggestDataJobs.


        :param score: The score of this SuggestDataJobs.
        :type score: float
        """
        if score is not None and score > 1:  # noqa: E501
            raise ValueError("Invalid value for `score`, must be a value less than or equal to `1`")  # noqa: E501
        if score is not None and score < 0:  # noqa: E501
            raise ValueError("Invalid value for `score`, must be a value greater than or equal to `0`")  # noqa: E501

        self._score = score
